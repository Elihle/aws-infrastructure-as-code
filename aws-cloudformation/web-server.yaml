# Application Load Balancer - Security Groups

ELBSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: ELB Security Group
    VpcId: !Ref myVPC
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CiderIp: 203.0.113.0/32
    SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0

WebServerSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Web Server Security Group
    VpcId: !Ref myVPC
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ELBSecurityGroup
    SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0

# Application Load Balancer

MyALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MyALB
      Subnets:
        - !Ref publicSubnetA
        - !Ref publicSubnetB
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Scheme: 'internet-facing'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: MyALB

# Target Group

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: '/'
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

 # Listener

  MyALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '200'
            ContentType: 'text/plain'
            MessageBody: 'OK'
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

# Launch Template

MyLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties: 
      LaunchTemplateName: 'MyLaunchTemplate'
      VersionDescription: 'Initial version'
      LaunchTemplateData:
        InstanceType: 't2.micro'
        ImageId: 'ami-0ae8f15ae66fe8cda'
        UserData:
          Fn::Base64: |
#!/bin/bash

DB_NAME="wordpress"
DB_USERNAME="wpadmin"
DB_PASSWORD="MyPassword123"
DB_HOST=""
EFS_FS_ID=""

dnf update -y

#install wget, apache server, php and efs utils
dnf install -y httpd wget php-fpm php-mysqli php-json php amazon-efs-utils

#create wp-content mountpoint
mkdir -p /var/www/html/wp-content
mount -t efs $EFS_FS_ID:/ /var/www/html/wp-content

#install wordpress
cd /var/www
wget https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz
cp wordpress/wp-config-sample.php wordpress/wp-config.php
rm -f latest.tar.gz

#change wp-config with DB details
cp -rn wordpress/* /var/www/html/
sed -i "s/database_name_here/$DB_NAME/g" /var/www/html/wp-config.php
sed -i "s/username_here/$DB_USERNAME/g" /var/www/html/wp-config.php
sed -i "s/password_here/$DB_PASSWORD/g" /var/www/html/wp-config.php
sed -i "s/localhost/$DB_HOST/g" /var/www/html/wp-config.php

#change httpd.conf file to allowoverride
#  enable .htaccess files in Apache config using sed command
sed -i '/<Directory "\/var\/www\/html">/,/<\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf

# create phpinfo file
echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php

# Recursively change OWNER of directory /var/www and all its contents
chown -R apache:apache /var/www

systemctl restart httpd
systemctl enable httpd

        SecurityGroups:
          - 'EFSClientsSecurityGroup'
          - 'WebServerSecurityGroup'
          - 'DatabaseClientsSecurityGroup'
        TagSpecifications:
          - ResourceType: 'instance'
            Tags:
              - Key: 'Name'
                Value: 'MyInstance'

# Autoscaling

MyAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: 'MyAutoScalingGroup'
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - 'appSubnetA'
        - 'appSubnetB'
      Tags:
        - Key: 'Name'
          Value: 'MyAutoScalingGroupInstance'
          PropagateAtLaunch: true

   MyScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup
      PolicyType: 'TargetTrackingScaling'
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'ASGAverageCPUUtilization'
        TargetValue: 80
        ScaleInCooldown: 300
        ScaleOutCooldown: 300